#+TITLE: README for the HDDA python toolbox
#+AUTHOR: Mathieu Fauvel
#+EMAIL: mathieu.fauvel@ensat.fr
#+EXCLUDE_TAGS: noexport

* Objectives
The package provides a python implementation of the High Dimensional
Discriminant analysis/clustering models, see publications:
- [[http://hal.archives-ouvertes.fr/hal-00394327]]
- [[http://hal.archives-ouvertes.fr/hal-00022183/]]

  
The original =R= package available on the CRAN:
[[http://cran.r-project.org/web/packages/HDclassif/index.html]]

Some of the models are actually implemented, those who usually provide
the best results in terms of classification accuracy.

* Install
Just download the package. It has been tested on linux, Debian Wheezy
with Python 2.7.

* Requirements
[[http://www.scipy.org/][Scipy]] and [[http://scikit-learn.org/stable/][Scikit]] should be installed. Also, for a faster processing, a
good linear algebra library is preferable. [[http://openblas.net/][Openblas]] is a good option.

* Usage
We provide an introductory example taken from Charles Bouveyron
thesis, on the /crabs/ data set. We also compare with the standard GMM
with EM provided by scikit.

First, load some packages and define some variables:
#+BEGIN_SRC python :tangle simu_crabs.py :noweb yes :exports both :session hdda
import hdda
import matplotlib.pyplot as plt
import scipy as sp
from sklearn.decomposition import PCA
from sklearn import mixture

# Parameters for HDDA
MODEL = ['M1','M2','M3','M4','M5','M6','M7','M8']
th,p = sp.linspace(0.2,0.95,num=4),sp.arange(1,5,1)
#+END_SRC

#+RESULTS:

Load the data
#+BEGIN_SRC python :tangle simu_crabs.py :noweb yes :exports code
data = sp.load('crabs.npz')
X = data['x']
Y = data['y']
#+END_SRC

For illustration, the projection on the two first PC axis is done
#+BEGIN_SRC python :tangle simu_crabs.py :noweb yes :exports code
plt.figure()
pca = PCA(n_components=2)
Xp = pca.fit_transform(X)
plt.scatter(Xp[:,0],Xp[:,1],c=Y,s=40)
plt.savefig('2D_true_labels.png')
#+END_SRC

[[file:2D_true_labels.png]]

Then we learn each model and store the optimal BIC value and its
corresponding parameters

#+BEGIN_SRC python :tangle simu_crabs.py :noweb yes :exports code
BIC,POS = [],[]
for model_ in MODEL:
    bic=[]
    for th_,p_ in zip(th,p):
        model = hdda.HDGMM(model=model_)
        param = {'th':th_,'p':p_,'C':4,'init':'kmeans'}
        yp=model.fit(X,param=param)
        bic.append(model.bic[-1])
    BIC.append(sp.amin(bic))
    POS.append(sp.argmin(bic))
plt.figure()
plt.plot(BIC)
plt.savefig("bic.png")
#+END_SRC

[[file:bic.png]]

From all the models, the one with the minimal BIC is selected. Then
we learn (again! can be saved from the previous loop...) and we plot
the results.

#+BEGIN_SRC python :tangle simu_crabs.py :noweb yes :exports code
t = sp.argmin(BIC)
best_model = MODEL[t]
param = {'th':th[POS[t]],'p':p[POS[t]],'C':4,'init':'kmeans'}
model=hdda.HDGMM(model=best_model)
yp=model.fit(X,param=param)

print "Best model "+best_model
print "With parameter " + str(th[POS[t]]) + " and " +str(p[POS[t]])

plt.figure()
plt.scatter(Xp[:,0],Xp[:,1],c=yp,s=40)
plt.savefig("2D_hdda.png")
#+END_SRC

[[file:2D_hdda.png]]

The same learning is done with the GMM from scikit, and we plot the results
#+BEGIN_SRC python :tangle simu_crabs.py :noweb yes :exports code
clf = mixture.GMM(n_components=4, covariance_type='full')
clf.fit(X)
yp=clf.predict(X)

plt.figure()
plt.scatter(Xp[:,0],Xp[:,1],c=yp,s=40)
plt.savefig('2D_gmm.png')
#+END_SRC

[[file:2D_gmm.png]]

The file produce the following output
#+BEGIN_SRC sh :exports both
python simu_crabs.py
#+END_SRC

#+RESULTS:
| Best | model     |  M2 |     |   |
| With | parameter | 0.2 | and | 1 |

